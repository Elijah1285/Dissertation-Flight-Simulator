//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input Actions/IA_AircraftControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IA_AircraftControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IA_AircraftControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_AircraftControls"",
    ""maps"": [
        {
            ""name"": ""Flight"",
            ""id"": ""c1659e76-9ff9-44ab-98c1-3bc19800678f"",
            ""actions"": [
                {
                    ""name"": ""Stick"",
                    ""type"": ""Value"",
                    ""id"": ""55bed2ad-83dc-456c-a75a-0416526e0deb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pedals"",
                    ""type"": ""Value"",
                    ""id"": ""70ac4fcb-963a-4b96-b3a8-8b02e30b4b44"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Engine"",
                    ""type"": ""Button"",
                    ""id"": ""823b6884-26a8-4ea3-b0f2-04cd64513aaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleUp"",
                    ""type"": ""Button"",
                    ""id"": ""ab176654-09f6-4b94-9d87-8aef5efd5fb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThrottleDown"",
                    ""type"": ""Button"",
                    ""id"": ""82d6d6cc-3b2f-405c-8fa3-01ace2a2b0aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleBrakes"",
                    ""type"": ""Button"",
                    ""id"": ""29f59c38-ae4e-46a7-b518-b29d94c7e9d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""29a72cb6-dac2-4da3-ac05-4ce663d9a88a"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""226140e9-47a8-44b6-a1a3-57fbd1601bac"",
                    ""path"": ""<Joystick>/{Twist}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pedals"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f7f4f06-6584-4c18-b68a-5fb0da95a0ef"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Engine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc430908-6d12-4fe5-b57f-6cd3e593b198"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bcbad2b5-4764-4e99-9a27-970e6ba66241"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThrottleDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8477716e-4722-46d6-b360-7d48abc605a0"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleBrakes"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Flight
        m_Flight = asset.FindActionMap("Flight", throwIfNotFound: true);
        m_Flight_Stick = m_Flight.FindAction("Stick", throwIfNotFound: true);
        m_Flight_Pedals = m_Flight.FindAction("Pedals", throwIfNotFound: true);
        m_Flight_Engine = m_Flight.FindAction("Engine", throwIfNotFound: true);
        m_Flight_ThrottleUp = m_Flight.FindAction("ThrottleUp", throwIfNotFound: true);
        m_Flight_ThrottleDown = m_Flight.FindAction("ThrottleDown", throwIfNotFound: true);
        m_Flight_ToggleBrakes = m_Flight.FindAction("ToggleBrakes", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Flight
    private readonly InputActionMap m_Flight;
    private List<IFlightActions> m_FlightActionsCallbackInterfaces = new List<IFlightActions>();
    private readonly InputAction m_Flight_Stick;
    private readonly InputAction m_Flight_Pedals;
    private readonly InputAction m_Flight_Engine;
    private readonly InputAction m_Flight_ThrottleUp;
    private readonly InputAction m_Flight_ThrottleDown;
    private readonly InputAction m_Flight_ToggleBrakes;
    public struct FlightActions
    {
        private @IA_AircraftControls m_Wrapper;
        public FlightActions(@IA_AircraftControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Stick => m_Wrapper.m_Flight_Stick;
        public InputAction @Pedals => m_Wrapper.m_Flight_Pedals;
        public InputAction @Engine => m_Wrapper.m_Flight_Engine;
        public InputAction @ThrottleUp => m_Wrapper.m_Flight_ThrottleUp;
        public InputAction @ThrottleDown => m_Wrapper.m_Flight_ThrottleDown;
        public InputAction @ToggleBrakes => m_Wrapper.m_Flight_ToggleBrakes;
        public InputActionMap Get() { return m_Wrapper.m_Flight; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlightActions set) { return set.Get(); }
        public void AddCallbacks(IFlightActions instance)
        {
            if (instance == null || m_Wrapper.m_FlightActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlightActionsCallbackInterfaces.Add(instance);
            @Stick.started += instance.OnStick;
            @Stick.performed += instance.OnStick;
            @Stick.canceled += instance.OnStick;
            @Pedals.started += instance.OnPedals;
            @Pedals.performed += instance.OnPedals;
            @Pedals.canceled += instance.OnPedals;
            @Engine.started += instance.OnEngine;
            @Engine.performed += instance.OnEngine;
            @Engine.canceled += instance.OnEngine;
            @ThrottleUp.started += instance.OnThrottleUp;
            @ThrottleUp.performed += instance.OnThrottleUp;
            @ThrottleUp.canceled += instance.OnThrottleUp;
            @ThrottleDown.started += instance.OnThrottleDown;
            @ThrottleDown.performed += instance.OnThrottleDown;
            @ThrottleDown.canceled += instance.OnThrottleDown;
            @ToggleBrakes.started += instance.OnToggleBrakes;
            @ToggleBrakes.performed += instance.OnToggleBrakes;
            @ToggleBrakes.canceled += instance.OnToggleBrakes;
        }

        private void UnregisterCallbacks(IFlightActions instance)
        {
            @Stick.started -= instance.OnStick;
            @Stick.performed -= instance.OnStick;
            @Stick.canceled -= instance.OnStick;
            @Pedals.started -= instance.OnPedals;
            @Pedals.performed -= instance.OnPedals;
            @Pedals.canceled -= instance.OnPedals;
            @Engine.started -= instance.OnEngine;
            @Engine.performed -= instance.OnEngine;
            @Engine.canceled -= instance.OnEngine;
            @ThrottleUp.started -= instance.OnThrottleUp;
            @ThrottleUp.performed -= instance.OnThrottleUp;
            @ThrottleUp.canceled -= instance.OnThrottleUp;
            @ThrottleDown.started -= instance.OnThrottleDown;
            @ThrottleDown.performed -= instance.OnThrottleDown;
            @ThrottleDown.canceled -= instance.OnThrottleDown;
            @ToggleBrakes.started -= instance.OnToggleBrakes;
            @ToggleBrakes.performed -= instance.OnToggleBrakes;
            @ToggleBrakes.canceled -= instance.OnToggleBrakes;
        }

        public void RemoveCallbacks(IFlightActions instance)
        {
            if (m_Wrapper.m_FlightActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlightActions instance)
        {
            foreach (var item in m_Wrapper.m_FlightActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlightActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlightActions @Flight => new FlightActions(this);
    public interface IFlightActions
    {
        void OnStick(InputAction.CallbackContext context);
        void OnPedals(InputAction.CallbackContext context);
        void OnEngine(InputAction.CallbackContext context);
        void OnThrottleUp(InputAction.CallbackContext context);
        void OnThrottleDown(InputAction.CallbackContext context);
        void OnToggleBrakes(InputAction.CallbackContext context);
    }
}
